import { ObjectId, Filter } from 'mongodb'
import {
	IsOptional,
	IsDate,
	IsNotEmpty,
	IsObject,
	IsArray,
	ValidateNested,
	IsEnum,
	ArrayMinSize,
} from 'class-validator'
import { EHistoryActions } from 'src/constants'
import { ExtractAutoGeneratedType } from 'src/utils/models'
import { CustomIsMongoId } from 'src/utils/validator'

export class IHistory {
	@IsNotEmpty()
	@IsDate()
	createdAt: Date

	@IsNotEmpty()
	@IsEnum(EHistoryActions)
	action: EHistoryActions

	@IsNotEmpty()
	@IsObject()
	modifiedValues: Record<string, unknown>
}

export class ICollectionState {
	@IsOptional()
	@CustomIsMongoId()
	_id?: ObjectId

	@IsNotEmpty()
	@IsDate()
	createdAt?: Date

	@IsNotEmpty()
	@IsDate()
	updatedAt?: Date

	@IsNotEmpty()
	@IsArray()
	@ValidateNested({ each: true })
	@ArrayMinSize(1)
	history: IHistory[]
}

export interface ICollection<T> {
	find(query: Filter<T>): Promise<T[]>
	findOne(query: Filter<T>): Promise<T>
	aggregate(pipeline: Document[]): Promise<T[]>
	insertOne(doc: ExtractAutoGeneratedType<T>): Promise<T>
	insertMany(docs: ExtractAutoGeneratedType<T>[]): Promise<T[]>
	update(doc: ExtractAutoGeneratedType<T>, options?: Record<string, unknown>): Promise<T>
	remove(query: Filter<T>): Promise<void>
	count(query: Filter<T>): Promise<number>
}
